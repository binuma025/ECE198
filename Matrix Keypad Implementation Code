/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "liquidcrystal_i2c.h" // Ensure this file is included

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* Keypad Definitions */
#define ROWS 4
#define COLS 4

uint16_t rowPins[ROWS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3}; // Rows -> PB0, PB1, PB2, PB3
uint16_t colPins[COLS] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7}; // Columns -> PB4, PB5, PB6, PB7
GPIO_TypeDef* rowPorts[ROWS] = {GPIOB, GPIOB, GPIOB, GPIOB};
GPIO_TypeDef* colPorts[COLS] = {GPIOB, GPIOB, GPIOB, GPIOB};

// Keypad character map
char keypadMap[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

/* Function Prototypes */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
char getKeypadKey(void);

int main(void)
{
    /* Initialize HAL Library */
    HAL_Init();

    /* Configure System Clock */
    SystemClock_Config();

    /* Initialize GPIO and I2C */
    MX_GPIO_Init();
    MX_I2C1_Init();

    /* Initialize LCD */
    lcd_init(&hi2c1, (0x27 << 1)); // LCD I2C address: 0x27
    lcd_backlight();
    lcd_clear();
    lcd_set_cursor(0, 0);
    lcd_print("Press a key:");

    while (1)
    {
        char key = getKeypadKey();
        if (key)
        {
            lcd_clear();
            lcd_set_cursor(0, 0);
            lcd_print("Key Pressed:");
            lcd_set_cursor(0, 1);
            lcd_send_data(key);
            HAL_Delay(500);
        }
    }
}

/**
  * @brief Scans the 4x4 matrix keypad for a pressed key.
  * @retval char The character of the key pressed, or 0 if no key is pressed.
  */
char getKeypadKey(void)
{
    for (int row = 0; row < ROWS; row++)
    {
        // Set all rows HIGH, then pull one LOW
        for (int i = 0; i < ROWS; i++)
        {
            HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
        }
        HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_RESET);

        // Check all columns for a LOW signal
        for (int col = 0; col < COLS; col++)
        {
            if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET)
            {
                HAL_Delay(50); // Debounce
                if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET)
                {
                    while (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET); // Wait for key release
                    return keypadMap[row][col];
                }
            }
        }
    }
    return 0; // No key pressed
}

/**
  * @brief Initialize I2C1 peripheral.
  */
static void MX_I2C1_Init(void)
{
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
  * @brief Initialize GPIO for the keypad rows and columns.
  */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    /* Enable GPIOB Clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();

    /* Configure row pins as output */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Configure column pins as input with pull-up resistors */
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /* Configure PLL for STM32F4 */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 16;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
  * @brief Error Handler
  */
void Error_Handler(void)
{
    while (1)
    {
        // Loop forever for debugging
    }
}
